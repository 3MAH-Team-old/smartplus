# CMakeLists.txt

# Visit http://www.lem3.fr/chemisky/smartplus/ to find the full manual for Windows users.

cmake_minimum_required(VERSION 2.6)
project(smartplus)

# The version number
set(VERSION_MAJOR 0)
set(VERSION_MINOR 9)
set(VERSION_PATCH 0)

if(VERSION_PATCH MATCHES "0")
	set(VERSION_NUMBER "${VERSION_MAJOR}.${VERSION_MINOR}")
else()
	set(VERSION_NUMBER "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")
endif()

message(STATUS "Configuring ${PROJECT_NAME} ${VERSION_NUMBER}")

# We default to debugging mode for developers.
option(DEBUG "Compile with debugging information" OFF)

# configure a header file to pass some CMake settings
# to the source code
configure_file (
  "${PROJECT_SOURCE_DIR}/configuration.hpp.in"
  "${PROJECT_BINARY_DIR}/configuration.hpp"
)

#Set executable files and library files
set(EXECUTABLE_OUTPUT_PATH bin/${CMAKE_BUILD_TYPE})
set(LIBRARY_OUTPUT_PATH lib/${CMAKE_BUILD_TYPE})

#All actions for Armadillo
#[[
In the first line, copy the full file path for the armadillo library between the quotation marks. For example, a valid file path would be:
C:/Documents/armadillo-4.400.2/include/armadillo
Do not delete the quotation marks. Respect the form of the slash.
]]
#[[
In the second line, copy the directory path for the armadillo library between the quotation marks. For example, a valid directory path would be:
C:/Documents/armadillo-4.400.2/include
Do not delete the quotation marks. Respect the form of the slash.
]]
set(ARMADILLO_LIBRARY "")
set(ARMADILLO_INCLUDE_DIR "")
include_directories(${ARMADILLO_INCLUDE_DIR})
set(ARMADILLO_LIBRARIES ${ARMADILLO_LIBRARIES} ${ARMADILLO_LIBRARY})
if (ARMADILLO_INCLUDE_DIR AND ARMADILLO_LIBRARY)
MESSAGE("Armadillo found in directory: " ${ARMADILLO_INCLUDE_DIR})
MESSAGE("It is the file: " ${ARMADILLO_LIBRARY})
else ()
MESSAGE("Armadillo not found")
endif ()

#All actions for BLAS and LAPACK
#[[
In the first two lines, copy the name of the blas and lapack libraries before the closing parenthesis, followed by the suffix .lib. For example, a valid name would be:
blas_win64_MTd.lib
and thus the first line would read:
find_path(BLAS_INCLUDE_DIR blas_win64_MTd.lib)
]]
#[[
In the next two lines, copy the same name before the closing parenthesis, without the suffix. For example, a valid name would be:
lapack_win64_MTd
]]
find_path(BLAS_INCLUDE_DIR )
find_path(LAPACK_INCLUDE_DIR )
find_library(BLAS_LIBRARY )
find_library(LAPACK_LIBRARY )
if (BLAS_INCLUDE_DIR AND BLAS_LIBRARY)
set(BLAS_FOUND TRUE)
include_directories(${BLAS_INCLUDE_DIR})
set(BLAS_LIBRARIES ${BLAS_LIBRARIES} ${BLAS_LIBRARY})
else ()
MESSAGE("BLAS not found")
endif ()
if (LAPACK_INCLUDE_DIR AND LAPACK_LIBRARY)
set(LAPACK_FOUND TRUE)
include_directories(${LAPACK_INCLUDE_DIR})
set(LAPACK_LIBRARIES ${LAPACK_LIBRARIES} ${LAPACK_LIBRARY})
else ()
MESSAGE("LAPACK not found")
endif ()

# OpenMP
include(FindOpenMP)
#find_package(OpenMP)

# Build type
if(NOT CMAKE_BUILD_TYPE)  # Debug by default
    set(CMAKE_BUILD_TYPE Debug CACHE STRING
        "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel"
        FORCE)
endif()

message(STATUS "Build type ${CMAKE_BUILD_TYPE}")

# Set the CFLAGS and CXXFLAGS depending on the options the user specified.
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")

# Debugging CFLAGS.  Turn optimizations off; turn debugging symbols on.
if(DEBUG)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -O0")
else()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -O3")
endif(DEBUG)

if(OPENMP_FOUND)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()

if(OPENMP_FOUND)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()


#Inclusion of public headers
include_directories(include)

# add the binary tree to the search path for include files
include_directories("${PROJECT_BINARY_DIR}")

#Command file to get all the files in the src/ and include/
file(GLOB_RECURSE source_files src/* include/*)
list(REMOVE_ITEM source_files "Control/solver.cpp")

#Add the files to the lib
add_library(smartplus SHARED ${source_files})
#link against armadillo
#target_link_libraries(smartplus ${ARMADILLO_LIBRARIES})

#Add the solver executable
add_executable(solver src/Control/solver.cpp ${source_files})

#Link BLAS and LAPACK
target_link_libraries(smartplus ${BLAS_LIBRARIES})
target_link_libraries(smartplus ${LAPACK_LIBRARIES})
target_link_libraries(solver ${BLAS_LIBRARIES})
target_link_libraries(solver ${LAPACK_LIBRARIES})
